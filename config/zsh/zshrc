# ~/.config/zsh/zshrc
# Main zsh configuration file
#
# This file is symlinked to ~/.zshrc and contains all main shell configuration
# For sensitive data (API keys, tokens), use ~/.config/zsh/zshrc.local

# =============================================================================
# OH MY ZSH CONFIGURATION
# =============================================================================

# Path to your oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Set custom Oh My Zsh directory for themes, plugins, and other customizations
export ZSH_CUSTOM="$HOME/.config/zsh/oh-my-zsh-custom"

# Theme Configuration - Using Catppuccin theme
ZSH_THEME="catppuccin"
CATPPUCCIN_FLAVOR="mocha"  # Options: mocha, frappe, macchiato, latte
CATPPUCCIN_SHOW_TIME=true  # Show current time in prompt

# Oh My Zsh Options (uncomment to enable)
# CASE_SENSITIVE="true"              # Use case-sensitive completion
# HYPHEN_INSENSITIVE="true"          # _ and - will be interchangeable
# DISABLE_AUTO_UPDATE="true"         # Disable automatic updates
# DISABLE_MAGIC_FUNCTIONS="true"     # Fix pasting URLs and other text
# DISABLE_LS_COLORS="true"           # Disable colors in ls
# DISABLE_AUTO_TITLE="true"          # Disable auto-setting terminal title
# ENABLE_CORRECTION="true"           # Enable command auto-correction
# COMPLETION_WAITING_DOTS="true"     # Display red dots while waiting for completion
# DISABLE_UNTRACKED_FILES_DIRTY="true" # Faster git status for large repos
# HIST_STAMPS="mm/dd/yyyy"           # History timestamp format

# Plugins to load
# Standard plugins: $ZSH/plugins/
# Custom plugins: $ZSH_CUSTOM/plugins/
# Add wisely - too many plugins slow down shell startup
plugins=(git)

# Initialize Oh My Zsh
source $ZSH/oh-my-zsh.sh

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================

# Default editor
export EDITOR='nvim'

# Language environment
# export LANG=en_US.UTF-8

# Manual path (if needed)
# export MANPATH="/usr/local/man:$MANPATH"

# =============================================================================
# PATH CONFIGURATION
# =============================================================================
# Node.js version manager
export VOLTA_HOME="$HOME/.volta"
export PATH=$VOLTA_HOME/bin:$HOME/bin:$HOME/.local/bin:$PATH

# NPM global packages
export PATH=~/.npm-global/bin:$PATH

# CUDA development (if needed)
export PATH=/usr/local/cuda-12.3/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib64
export NCCL_HOME=/usr/local

# Rust/Cargo
export PATH=$HOME/.cargo/bin:$PATH

# Go
export PATH=$PATH:/usr/local/go/bin


# =============================================================================
# FUNCTIONS
# =============================================================================

# Check backup status on shell startup
check_backup_status() {
    LOG_FILE="/home/username/backup.log"
    if [ -f "$LOG_FILE" ]; then
        LAST_BACKUP=$(tail -n 1 "$LOG_FILE")
        if [[ $LAST_BACKUP == *"failed"* ]]; then
            echo -e "\033[0;31mWARNING: Last backup failed! Check $LOG_FILE\033[0m"
        else
            echo -e "\033[0;32mLast backup: $LAST_BACKUP\033[0m"
        fi
    fi
}

# Add backup check to precmd functions
precmd_functions+=(check_backup_status)

# =============================================================================
# PYTHON VIRTUAL ENVIRONMENT AUTO-ACTIVATION
# =============================================================================

# Track the currently activated venv path to avoid unnecessary reactivation
CURRENT_VENV_PATH=""

# Automatically activate Python virtual environments when entering directories
auto_activate_venv() {
    local dir="$PWD"
    local found_venv=""
    
    # Search up the directory tree for venv directories
    while [[ "$dir" != "/" ]]; do
        if [[ -f "$dir/venv/bin/activate" ]]; then
            found_venv="$dir/venv"
            break
        elif [[ -f "$dir/.venv/bin/activate" ]]; then
            found_venv="$dir/.venv"
            break
        fi
        dir="$(dirname "$dir")"
    done
    
    # Only change venv if different from current
    if [[ "$found_venv" != "$CURRENT_VENV_PATH" ]]; then
        # Deactivate current venv if active
        if [[ -n "$VIRTUAL_ENV" ]]; then
            deactivate
        fi
        
        # Activate new venv if found
        if [[ -n "$found_venv" ]]; then
            source "$found_venv/bin/activate"
            CURRENT_VENV_PATH="$found_venv"
            echo "Activated venv: $found_venv"
        else
            CURRENT_VENV_PATH=""
        fi
    fi
}

# Hook into directory changes
chpwd() {
    auto_activate_venv
}

# Activate on shell start
auto_activate_venv


# =============================================================================
# COMPLETION SYSTEM
# =============================================================================

# Set up completion paths
fpath=($HOME/.zsh/completions /usr/local/share/zsh/site-functions /usr/share/zsh/site-functions /usr/share/zsh/5.9/functions)

# Initialize completion system
autoload -Uz compinit && compinit

# =============================================================================
# LOAD EXTERNAL CONFIGURATIONS
# =============================================================================

# Load custom aliases (shared across all machines)
if [[ -f ~/.config/zsh/aliases ]]; then
    source ~/.config/zsh/aliases
fi

# Load local configuration (for sensitive data, machine-specific settings)
# This file is NOT tracked in git and should contain:
# - API keys and tokens
# - Database URLs
# - Machine-specific paths
# - Personal aliases and functions
if [[ -f ~/.config/zsh/zshrc.local ]]; then
    source ~/.config/zsh/zshrc.local
fi


# bun completions
[ -s "/home/james/.bun/_bun" ] && source "/home/james/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
